# Импортируем модуль os для работы с файлами и папками
import os

# Определяем класс FileChecker
class FileChecker:
    """
    Класс для проверки типов файлов в папке и запуска разных функций в зависимости от типа.
    """

    # Определяем конструктор класса
    def __init__(self, folder, search_phrases):
        """
        Конструктор класса, который принимает путь к папке и множество поисковых фраз.
        :param folder: путь к папке, в которой находятся файлы
        :param search_phrases: множество поисковых фраз, по которым будет производиться сверка данных
        """
        # Сохраняем аргументы в атрибутах класса
        self.folder = folder
        self.search_phrases = search_phrases

    # Определяем метод check_file_type
    def check_file_type(self, file_path):
        """
        Метод для проверки типа файла по его расширению и запуска соответствующей функции.
        :param file_path: путь к файлу, который нужно проверить
        :return: результат работы соответствующей функции или None, если тип файла не поддерживается
        """
        # Получаем расширение файла из его пути
        file_extension = os.path.splitext(file_path)[1]
        # Проверяем, какое расширение имеет файл
        if file_extension == ".docx":
            # Если файл является документом Word, то запускаем функцию для работы с Word-файлами
            # Пока такой функции нет, пусть она будет с pass
            pass
        elif file_extension == ".xlsx":
            # Если файл является документом Excel, то запускаем функцию для работы с Excel-файлами
            # Пока такой функции нет, пусть она будет с pass
            pass
        elif file_extension == ".pdf":
            # Если файл является документом PDF, то запускаем функцию для работы с PDF-файлами
            # Эта функция уже определена выше, мы можем использовать ее
            return self.extract_search_phrase_pdf(file_path)
        else:
            # Если файл имеет другое расширение, то возвращаем None, так как тип файла не поддерживается
            return None

    # Определяем метод extract_search_phrase_pdf
    def extract_search_phrase_pdf(self, file_path):
        """
        Метод для парсинга и извлечения данных из файла PDF, сверяет на словосочетание в тексте
        документа и возвращает строку с найденным текстом и название документа.

        :param file_path: принимает путь до файла PDF
        :return: возвращает найденную строку в документе целиком, если она содержит в себе указанное слово,
         и наименование файла в котором найдено слово.
        """
        # Здесь вы можете использовать код, который я показал вам ранее, для работы с PDF-файлами
        # Я не буду повторять его здесь, чтобы сэкономить место
        pass
